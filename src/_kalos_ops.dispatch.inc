/* Generated by kalos_idl_compiler - DO NOT MODIFY */

#define K__pstring      kalos_string*
#define K__string       kalos_string
#define K__pnumber      kalos_int
#define K__number       kalos_int
#define K__pbool        kalos_int
#define K__bool         kalos_int
#define K__pobject      kalos_object_ref*
#define K__object       kalos_object_ref
#define K__pany         kalos_value*
#define K__any          kalos_value

#define K__t_string     KALOS_VALUE_STRING
#define K__t_number     KALOS_VALUE_NUMBER
#define K__t_bool       KALOS_VALUE_BOOL
#define K__t_object     KALOS_VALUE_OBJECT
#define K__t_any        KALOS_VALUE_ANY

#define K__final_string(stack, x) if (retval) { push_string(stack, x); } else { kalos_string_release((kalos_state*)state, x);; }
#define K__final_number(stack, x) if (retval) { push_number(stack, x); } else { ;; }
#define K__final_bool(stack, x)   if (retval) { push_bool(stack, x); } else { ;; }
#define K__final_object(stack, x) if (retval) { push_object(stack, x); } else { kalos_object_release((kalos_state*)state, &x);; }
#define K__final_any(stack, x)    if (retval) { push_any(stack, x); } else { kalos_clear((kalos_state*)state, &x);; }
#define K__arg(n, x)              peek(stack, (n)-(x))
#define K__arg_string(x)          &((x)->value.string)
#define K__arg_number(x)          (x)->value.number
#define K__arg_bool(x)            (x)->value.number
#define K__arg_object(x)          &((x)->value.object)
#define K__arg_any(x)             (x)
#define K__match(id, n, s)        (op == KALOS_OP_##s)

static inline bool kalos_run_dispatch_ops(kalos_run_state* state, kalos_op op, kalos_stack* stack, bool retval) {
	// id=1 name=DROP arg_count=1 binding=fn op_drop
	if (K__match(/*id=*/1, /*args=*/1, /*name=*/DROP)) {
		LOG("Invoke %s", "DROP");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			op_drop((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=2 name=PUSH_INTEGER arg_count=0 binding=fn op_push_integer
	if (K__match(/*id=*/2, /*args=*/0, /*name=*/PUSH_INTEGER)) {
		LOG("Invoke %s", "PUSH_INTEGER");
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__number x = op_push_integer((void*)state, op);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=3 name=PUSH_STRING arg_count=0 binding=fn op_push_string
	if (K__match(/*id=*/3, /*args=*/0, /*name=*/PUSH_STRING)) {
		LOG("Invoke %s", "PUSH_STRING");
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__string x = op_push_string((void*)state, op);
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=4 name=PUSH_TRUE arg_count=0 binding=c 1
	if (K__match(/*id=*/4, /*args=*/0, /*name=*/PUSH_TRUE)) {
		LOG("Invoke %s", "PUSH_TRUE");
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__bool x = (1);
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=5 name=PUSH_FALSE arg_count=0 binding=c 0
	if (K__match(/*id=*/5, /*args=*/0, /*name=*/PUSH_FALSE)) {
		LOG("Invoke %s", "PUSH_FALSE");
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__bool x = (0);
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=6 name=MAKE_LIST arg_count=0 binding=fn op_make_list
	if (K__match(/*id=*/6, /*args=*/0, /*name=*/MAKE_LIST)) {
		LOG("Invoke %s", "MAKE_LIST");
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 1 + vararg_count;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__object x = op_make_list((void*)state, op, vararg_count, kalos_stack_vararg_start(stack, vararg_count));
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	// id=7 name=GOTO arg_count=1 binding=fn op_goto
	if (K__match(/*id=*/7, /*args=*/1, /*name=*/GOTO)) {
		LOG("Invoke %s", "GOTO");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			op_goto((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=8 name=GOTO_IF arg_count=2 binding=fn op_goto_if
	if (K__match(/*id=*/8, /*args=*/2, /*name=*/GOTO_IF)) {
		LOG("Invoke %s", "GOTO_IF");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_bool, K__t_number)) {
			op_goto_if((void*)state, op, K__arg_bool(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=9 name=LOAD_LOCAL arg_count=1 binding=fn op_load
	if (K__match(/*id=*/9, /*args=*/1, /*name=*/LOAD_LOCAL)) {
		LOG("Invoke %s", "LOAD_LOCAL");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__any x = op_load((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_any(stack, x);
			return true;
		}
	}

	// id=10 name=LOAD_GLOBAL arg_count=1 binding=fn op_load
	if (K__match(/*id=*/10, /*args=*/1, /*name=*/LOAD_GLOBAL)) {
		LOG("Invoke %s", "LOAD_GLOBAL");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__any x = op_load((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_any(stack, x);
			return true;
		}
	}

	// id=11 name=STORE_LOCAL arg_count=2 binding=fn op_store
	if (K__match(/*id=*/11, /*args=*/2, /*name=*/STORE_LOCAL)) {
		LOG("Invoke %s", "STORE_LOCAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_number)) {
			op_store((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=12 name=STORE_GLOBAL arg_count=2 binding=fn op_store
	if (K__match(/*id=*/12, /*args=*/2, /*name=*/STORE_GLOBAL)) {
		LOG("Invoke %s", "STORE_GLOBAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_number)) {
			op_store((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=13 name=FORMAT arg_count=1 binding=fn op_format
	if (K__match(/*id=*/13, /*args=*/1, /*name=*/FORMAT)) {
		LOG("Invoke %s", "FORMAT");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__string x = op_format((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=14 name=LENGTH arg_count=1 binding=fn op_string_number
	if (K__match(/*id=*/14, /*args=*/1, /*name=*/LENGTH)) {
		LOG("Invoke %s", "LENGTH");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_string)) {
			K__number x = op_string_number((void*)state, op, K__arg_string(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=15 name=ORD arg_count=1 binding=fn op_string_number
	if (K__match(/*id=*/15, /*args=*/1, /*name=*/ORD)) {
		LOG("Invoke %s", "ORD");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_string)) {
			K__number x = op_string_number((void*)state, op, K__arg_string(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=16 name=TO_STRING arg_count=1 binding=fn op_to_string
	if (K__match(/*id=*/16, /*args=*/1, /*name=*/TO_STRING)) {
		LOG("Invoke %s", "TO_STRING");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__string x = op_to_string((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=17 name=TO_BOOL arg_count=1 binding=fn op_to_bool
	if (K__match(/*id=*/17, /*args=*/1, /*name=*/TO_BOOL)) {
		LOG("Invoke %s", "TO_BOOL");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__bool x = op_to_bool((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=18 name=LOGICAL_NOT arg_count=1 binding=fn op_unary_number
	if (K__match(/*id=*/18, /*args=*/1, /*name=*/LOGICAL_NOT)) {
		LOG("Invoke %s", "LOGICAL_NOT");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__bool x = op_unary_number((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=18 name=LOGICAL_NOT arg_count=1 binding=fn op_to_bool
	if (K__match(/*id=*/18, /*args=*/1, /*name=*/LOGICAL_NOT)) {
		LOG("Invoke %s", "LOGICAL_NOT");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__bool x = op_to_bool((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=19 name=TO_INT arg_count=1 binding=fn op_to_int
	if (K__match(/*id=*/19, /*args=*/1, /*name=*/TO_INT)) {
		LOG("Invoke %s", "TO_INT");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__number x = op_to_int((void*)state, op, K__arg_any(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=20 name=TO_CHAR arg_count=1 binding=fn op_to_hex_or_char
	if (K__match(/*id=*/20, /*args=*/1, /*name=*/TO_CHAR)) {
		LOG("Invoke %s", "TO_CHAR");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__string x = op_to_hex_or_char((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=21 name=TO_HEX arg_count=1 binding=fn op_to_hex_or_char
	if (K__match(/*id=*/21, /*args=*/1, /*name=*/TO_HEX)) {
		LOG("Invoke %s", "TO_HEX");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__string x = op_to_hex_or_char((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=22 name=ITERATOR arg_count=1 binding=fn op_iterator
	if (K__match(/*id=*/22, /*args=*/1, /*name=*/ITERATOR)) {
		LOG("Invoke %s", "ITERATOR");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__object x = op_iterator((void*)state, op, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	// id=23 name=SPLIT arg_count=2 binding=fn op_split
	if (K__match(/*id=*/23, /*args=*/2, /*name=*/SPLIT)) {
		LOG("Invoke %s", "SPLIT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__object x = op_split((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	// id=24 name=RANGE arg_count=2 binding=fn op_range
	if (K__match(/*id=*/24, /*args=*/2, /*name=*/RANGE)) {
		LOG("Invoke %s", "RANGE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__object x = op_range((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	// id=25 name=EQUAL arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/25, /*args=*/2, /*name=*/EQUAL)) {
		LOG("Invoke %s", "EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=25 name=EQUAL arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/25, /*args=*/2, /*name=*/EQUAL)) {
		LOG("Invoke %s", "EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=25 name=EQUAL arg_count=2 binding=fn op_compare_type
	if (K__match(/*id=*/25, /*args=*/2, /*name=*/EQUAL)) {
		LOG("Invoke %s", "EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_any)) {
			K__bool x = op_compare_type((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_any(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=26 name=NOT_EQUAL arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/26, /*args=*/2, /*name=*/NOT_EQUAL)) {
		LOG("Invoke %s", "NOT_EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=26 name=NOT_EQUAL arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/26, /*args=*/2, /*name=*/NOT_EQUAL)) {
		LOG("Invoke %s", "NOT_EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=26 name=NOT_EQUAL arg_count=2 binding=fn op_compare_type
	if (K__match(/*id=*/26, /*args=*/2, /*name=*/NOT_EQUAL)) {
		LOG("Invoke %s", "NOT_EQUAL");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_any)) {
			K__bool x = op_compare_type((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_any(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=27 name=GT arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/27, /*args=*/2, /*name=*/GT)) {
		LOG("Invoke %s", "GT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=27 name=GT arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/27, /*args=*/2, /*name=*/GT)) {
		LOG("Invoke %s", "GT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=28 name=GTE arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/28, /*args=*/2, /*name=*/GTE)) {
		LOG("Invoke %s", "GTE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=28 name=GTE arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/28, /*args=*/2, /*name=*/GTE)) {
		LOG("Invoke %s", "GTE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=29 name=LT arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/29, /*args=*/2, /*name=*/LT)) {
		LOG("Invoke %s", "LT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=29 name=LT arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/29, /*args=*/2, /*name=*/LT)) {
		LOG("Invoke %s", "LT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=30 name=LTE arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/30, /*args=*/2, /*name=*/LTE)) {
		LOG("Invoke %s", "LTE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__bool x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=30 name=LTE arg_count=2 binding=fn op_compare_string
	if (K__match(/*id=*/30, /*args=*/2, /*name=*/LTE)) {
		LOG("Invoke %s", "LTE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_string)) {
			K__bool x = op_compare_string((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=31 name=REPLACE arg_count=3 binding=fn op_replace
	if (K__match(/*id=*/31, /*args=*/3, /*name=*/REPLACE)) {
		LOG("Invoke %s", "REPLACE");
		const int arg_count = 3;
		if (kalos_stack_setup_3(state, arg_count, K__t_string, K__t_string, K__t_string)) {
			K__string x = op_replace((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)), K__arg_string(K__arg(arg_count, 3)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=32 name=ADD arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/32, /*args=*/2, /*name=*/ADD)) {
		LOG("Invoke %s", "ADD");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=32 name=ADD arg_count=2 binding=fn op_string_add
	if (K__match(/*id=*/32, /*args=*/2, /*name=*/ADD)) {
		LOG("Invoke %s", "ADD");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_any)) {
			K__string x = op_string_add((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_any(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=32 name=ADD arg_count=2 binding=fn op_string_add2
	if (K__match(/*id=*/32, /*args=*/2, /*name=*/ADD)) {
		LOG("Invoke %s", "ADD");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_string)) {
			K__string x = op_string_add2((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=33 name=MULTIPLY arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/33, /*args=*/2, /*name=*/MULTIPLY)) {
		LOG("Invoke %s", "MULTIPLY");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=33 name=MULTIPLY arg_count=2 binding=fn op_string_multiply
	if (K__match(/*id=*/33, /*args=*/2, /*name=*/MULTIPLY)) {
		LOG("Invoke %s", "MULTIPLY");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_number)) {
			K__string x = op_string_multiply((void*)state, op, K__arg_string(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=33 name=MULTIPLY arg_count=2 binding=fn op_string_multiply2
	if (K__match(/*id=*/33, /*args=*/2, /*name=*/MULTIPLY)) {
		LOG("Invoke %s", "MULTIPLY");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_string)) {
			K__string x = op_string_multiply2((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=34 name=NEGATE arg_count=1 binding=fn op_unary_number
	if (K__match(/*id=*/34, /*args=*/1, /*name=*/NEGATE)) {
		LOG("Invoke %s", "NEGATE");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__number x = op_unary_number((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=35 name=POSIVATE arg_count=1 binding=fn op_unary_number
	if (K__match(/*id=*/35, /*args=*/1, /*name=*/POSIVATE)) {
		LOG("Invoke %s", "POSIVATE");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__number x = op_unary_number((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=36 name=BITWISE_NOT arg_count=1 binding=fn op_unary_number
	if (K__match(/*id=*/36, /*args=*/1, /*name=*/BITWISE_NOT)) {
		LOG("Invoke %s", "BITWISE_NOT");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__number x = op_unary_number((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=37 name=ABS arg_count=1 binding=fn op_unary_number
	if (K__match(/*id=*/37, /*args=*/1, /*name=*/ABS)) {
		LOG("Invoke %s", "ABS");
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__number x = op_unary_number((void*)state, op, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=38 name=LOGICAL_AND arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/38, /*args=*/2, /*name=*/LOGICAL_AND)) {
		LOG("Invoke %s", "LOGICAL_AND");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_bool, K__t_bool)) {
			K__bool x = op_number_op((void*)state, op, K__arg_bool(K__arg(arg_count, 1)), K__arg_bool(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=38 name=LOGICAL_AND arg_count=2 binding=fn op_logical_op
	if (K__match(/*id=*/38, /*args=*/2, /*name=*/LOGICAL_AND)) {
		LOG("Invoke %s", "LOGICAL_AND");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_any)) {
			K__any x = op_logical_op((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_any(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_any(stack, x);
			return true;
		}
	}

	// id=39 name=LOGICAL_OR arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/39, /*args=*/2, /*name=*/LOGICAL_OR)) {
		LOG("Invoke %s", "LOGICAL_OR");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_bool, K__t_bool)) {
			K__bool x = op_number_op((void*)state, op, K__arg_bool(K__arg(arg_count, 1)), K__arg_bool(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_bool(stack, x);
			return true;
		}
	}

	// id=39 name=LOGICAL_OR arg_count=2 binding=fn op_logical_op
	if (K__match(/*id=*/39, /*args=*/2, /*name=*/LOGICAL_OR)) {
		LOG("Invoke %s", "LOGICAL_OR");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_any)) {
			K__any x = op_logical_op((void*)state, op, K__arg_any(K__arg(arg_count, 1)), K__arg_any(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_any(stack, x);
			return true;
		}
	}

	// id=40 name=MINIMUM arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/40, /*args=*/2, /*name=*/MINIMUM)) {
		LOG("Invoke %s", "MINIMUM");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=41 name=MAXIMUM arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/41, /*args=*/2, /*name=*/MAXIMUM)) {
		LOG("Invoke %s", "MAXIMUM");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=42 name=LEFT_SHIFT arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/42, /*args=*/2, /*name=*/LEFT_SHIFT)) {
		LOG("Invoke %s", "LEFT_SHIFT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=43 name=RIGHT_SHIFT arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/43, /*args=*/2, /*name=*/RIGHT_SHIFT)) {
		LOG("Invoke %s", "RIGHT_SHIFT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=44 name=BIT_AND arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/44, /*args=*/2, /*name=*/BIT_AND)) {
		LOG("Invoke %s", "BIT_AND");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=45 name=BIT_OR arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/45, /*args=*/2, /*name=*/BIT_OR)) {
		LOG("Invoke %s", "BIT_OR");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=46 name=BIT_XOR arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/46, /*args=*/2, /*name=*/BIT_XOR)) {
		LOG("Invoke %s", "BIT_XOR");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=47 name=SUBTRACT arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/47, /*args=*/2, /*name=*/SUBTRACT)) {
		LOG("Invoke %s", "SUBTRACT");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=48 name=DIVIDE arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/48, /*args=*/2, /*name=*/DIVIDE)) {
		LOG("Invoke %s", "DIVIDE");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=49 name=MODULUS arg_count=2 binding=fn op_number_op
	if (K__match(/*id=*/49, /*args=*/2, /*name=*/MODULUS)) {
		LOG("Invoke %s", "MODULUS");
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = op_number_op((void*)state, op, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	return false;
}

#undef K__pstring
#undef K__string
#undef K__pnumber
#undef K__number
#undef K__pbool
#undef K__bool
#undef K__pobject
#undef K__object
#undef K__pany
#undef K__any
#undef K__t_string
#undef K__t_number
#undef K__t_bool
#undef K__t_object
#undef K__t_any
#undef K__final_string
#undef K__final_number
#undef K__final_bool
#undef K__final_object
#undef K__final_any
#undef K__arg
#undef K__arg_string
#undef K__arg_number
#undef K__arg_bool
#undef K__arg_object
#undef K__arg_any
#undef K__match
