idl {
    prefix "kalos_run_dispatch_";
    dispatch internal;
    module ops {
        fn END = op_end;
        fn DROP(x: any) = c "";
        fn PUSH_INTEGER(): number = op_push_integer;
        fn PUSH_STRING(): string = op_push_string;
        fn PUSH_TRUE(): bool = c "1";
        fn PUSH_FALSE(): bool = c "0";
        fn MAKE_LIST(x: any...): object = op_make_list;
        fn GOTO = op_goto;
        fn GOTO_IF(b: bool) = op_goto_if;

        fn LOAD_LOCAL(slot: number): any = op_load;
        fn LOAD_GLOBAL(slot: number): any = op_load;
        fn STORE_LOCAL(x: any, slot: number) = op_store;
        fn STORE_GLOBAL(x: any, slot: number) = op_store;

        fn FORMAT(x: any): string = op_format;
        fn LENGTH(x: string): number = op_string_number;
        fn ORD(x: string): number = op_string_number;

        fn TO_STRING(x: any): string = op_to_string;
        fn TO_BOOL(x: any): bool = op_to_bool;
        fn LOGICAL_NOT {
            (x: number): bool = c "!@0";
            (x: any): bool = op_to_bool;
        }

        fn TO_INT(n: any): number = op_to_int;
        fn TO_CHAR(n: number): string = op_to_hex_or_char;
        fn TO_HEX(n: number): string = op_to_hex_or_char;

        fn ITERATOR(o: object): object = op_iterator;
        fn ITERATOR_NEXT(o: object): object = op_iterator_next;
        fn SPLIT(s: string, s2: string): object = op_split;
        fn RANGE(n: number, n2: number): object = op_range;

        fn EQUAL {
            (n: number, n2: number): bool = c "@0==@1";
            (s: string, s2: string): bool = op_compare_string;
            (x: any, x2: any): bool = op_compare_type;
        }
        fn NOT_EQUAL {
            (n: number, n2: number): bool = c "@0!=@1";
            (s: string, s2: string): bool = op_compare_string;
            (x: any, x2: any): bool = op_compare_type;
        }
        fn GT {
            (n: number, n2: number): bool = c "@0>@1";
            (s: string, s2: string): bool = op_compare_string;
        }
        fn GTE {
            (n: number, n2: number): bool = c "@0>=@1";
            (s: string, s2: string): bool = op_compare_string;
        }
        fn LT {
            (n: number, n2: number): bool = c "@0<@1";
            (s: string, s2: string): bool = op_compare_string;
        }
        fn LTE {
            (n: number, n2: number): bool = c "@0<=@1";
            (s: string, s2: string): bool = op_compare_string;
        }

        fn REPLACE(s: string, s1: string, s2: string): string = op_replace;
        fn ADD {
            (n: number, n2: number): number = c "@0+@1";
            (s: string, s2: any): string = op_string_add;
            (s: any, s2: string): string = op_string_add2;
        }
        fn MULTIPLY {
            (n: number, n2: number): number = c "@0*@1";
            (s: string, n: number): string = op_string_multiply;
            (n: number, s: string): string = op_string_multiply2;
        }

        fn NEGATE(n: number): number = c "-@0";
        fn POSIVATE(n: number): number = c "+@0";
        fn BITWISE_NOT(n: number): number = c "~@0";
        fn ABS(n: number): number = c "abs(@0)";

        fn LOGICAL_AND {
            (b: bool, b2: bool): bool = c "@0&&@1";
            (x: any, x2: any): any = op_logical_op;
        }
        fn LOGICAL_OR {
            (b: bool, b2: bool): bool = c "@0||@1";
            (x: any, x2: any): any = op_logical_op;
        }

        fn MINIMUM(n: number, n2: number): number = c "min(@0, @1)";
        fn MAXIMUM(n: number, n2: number): number = c "max(@0, @1)";
        fn LEFT_SHIFT(n: number, n2: number): number = c "@0<<@1";
        fn RIGHT_SHIFT(n: number, n2: number): number = c "@0>>@1";
        fn BIT_AND(n: number, n2: number): number = c "@0&@1";
        fn BIT_OR(n: number, n2: number): number = c "@0|@1";
        fn BIT_XOR(n: number, n2: number): number = c "@0^@1";
        fn SUBTRACT(n: number, n2: number): number = c "@0-@1";
        fn DIVIDE(n: number, n2: number): number = c "@1==0?0:(@0/@1)";
        fn MODULUS(n: number, n2: number): number = c "@1==0?0:(@0%@1)";

        fn IDL(o: object) = op_idl;
        fn GETINDEX {
            (s: string, n: number): string = op_string_getindex;
            (o: object, n: number): any = op_getindex;
        }
        fn GOSUB(params: any...) = op_gosub;
        fn GOSUB_NORET(params: any...) = op_gosub;
    }
}
