import module;
import kidl;

var in_object = false;
var in_module = false;
var dispatch = "";
const FORWARD = "forward";
const IMPL = "impl";
const HANDLE = "handle";
const DISPATCH = "dispatch";
const OBJECT = "object";

handle open {
    println("/* Generated by kalos_idl_compiler - DO NOT MODIFY */");
    println("");
    println("#define K__string kalos_string*");
    println("#define K__number kalos_int");
    println("#define K__bool   kalos_int");
    println("#define K__object kalos_object*");
    println("#define K__any    kalos_value*");
    kidl.walk_modules(FORWARD);
    kidl.walk_modules(IMPL);
}

handle close {
    println("kalos_dispatch_fn {module.prefix}dispatch[] = {{");
    print(dispatch);
    println("}};");

    println("");
    println("#undef K__string");
    println("#undef K__number");
    println("#undef K__bool");
    println("#undef K__object");
    println("#undef K__any");
}

handle module.begin(context, m) {
    if (context == IMPL) {
        dispatch += "\t{m.prefix}{m.name},\n";
        module.walk_exports(HANDLE);
        println("void {m.prefix}{m.name}(kalos_state state, int function, kalos_stack* stack, bool retval) {{");
        println("\tswitch (function) {{");
        in_module = true;
        module.walk_exports(DISPATCH);
        in_module = false;
        println("\t}}");
        println("}}");
        println("");
    } else {
        module.walk_exports(FORWARD);
        #println("");
    }
}

handle module.handle_(context, handle_) {
    if (context != HANDLE) {
        return;
    }
    println("// id={handle_.module_index:04x}:{handle_.handle_index:04x} name={handle_.name}");
    if (module.name == "builtin") {
        print("void {module.prefix}trigger_{handle_.name}(kalos_state state");
    } else {
        print("void {module.prefix}{module.name}_trigger_{handle_.name}(kalos_state state");
    }
    var index = 0;
    var arg;
    for arg in handle_.args {
        print(", K__{arg} a{index}");
        index += 1;
    }
    println(") {{");
    index = 0;
    for arg in handle_.args {
        println("\tkalos_load_arg_{arg}(state, {index}, a{index});");
        index += 1;
    }
    println("\tkalos_trigger(state, kalos_make_address({handle_.module_index:#x}, {handle_.handle_index:#x}));");
    println("}}");
    println("");
}

handle module.object(context, object) {
    if (context != HANDLE) {
        return;
    }
    println("//{module.prefix}{module.name}_object_{object.name}_props");
    println("bool {module.prefix}{module.name}_object_{object.name}_props(kalos_state state, kalos_object* object, int function, kalos_stack* stack) {{");
    println("\tswitch (function) {{");
    in_object = true;
    module.walk_object_properties(OBJECT, object);
    in_object = false;
    println("\tdefault: return false;");
    println("\t}}");
    println("\treturn true;");
    println("}}");
    println("");
}

handle module.function(context, function) {
    if (context != DISPATCH) {
        return;
    }
    println("\t// id={function.id} name={function.name} arg_count={function.arg_count} symbol={function.realname}");
    println("\tcase {function.id}: {{");
    println("\t\tLOG(\"Invoke %s\", \"{function.name}\");");
    println("\t\tint arg_count = {function.arg_count};");
    var arg_offset = 1;
    if (function.varargs == "void") {
        println("\t\tkalos_stack_fixup_no_varargs(arg_count, stack);");
    } else {
        println("\t\tint ofs = kalos_stack_fixup_varargs(arg_count, stack);");
    }
    print("\t\t");
    if (function.return_type == "string") {
        print("kalos_string x = ");
    } else if (function.return_type == "number" || function.return_type == "bool") {
        print("kalos_int x = ");
    } else if (function.return_type == "object") {
        print("kalos_object* x = ");
    } else if (function.return_type == "any") {
        print("kalos_value x = ");
    }
    var arg;
    var index = 0;
    print("{function.realname}(state");
    for arg in function.args {
        print(", ");
        if (arg == "string") {
            print("&peek(stack, {-index-arg_offset})->value.string");
        } else if (arg == "number" || arg == "bool") {
            print("peek(stack, {-index-arg_offset})->value.number");
        } else if (arg == "object") {
            print("peek(stack, {-index-arg_offset})->value.object");
        } else if (arg == "any") {
            print("peek(stack, {-index-arg_offset})");
        }
        index += 1;
    }
    if (function.varargs != "void") {
        print(", peek(stack, -arg_count-ofs-1)->value.number, peek(stack, -arg_count-1)");
    }
    println(");");
    if (function.varargs == "void") {
        println("\t\tkalos_stack_cleanup_no_varargs(arg_count, 0, state, stack);");
    } else {
        println("\t\tkalos_stack_cleanup_varargs(arg_count, ofs, state, stack);");
    }
    if (function.return_type != "void") {
        println("\t\tif (retval) {{");
        println("\t\t\tpush_{function.return_type}(stack, x);");
        if (function.return_type == "string") {
            println("\t\t}} else {{");
            println("\t\t\tkalos_string_release(state, x);");
        } else if (function.return_type == "object") {
            println("\t\t}} else {{");
            println("\t\t\tkalos_object_release(state, x);");
        } else if (function.return_type == "any") {
            println("\t\t}} else {{");
            println("\t\t\tkalos_clear(state, x);");
        }
        println("\t\t}}");
    }
    println("\t\tbreak;");
    println("\t}}");
    println("");
}

handle module.property(context, property) {
    if (!in_module && !in_object) {
        return;
    }
    var maybe_object = "";
    if (in_object) {
        maybe_object = ", object";
    }
    if (property.read_id != 0) {
        println("\t// id={property.read_id} name={property.name} symbol={property.read_symbol}");
        println("\tcase {property.read_id}: {{");
        println("\t\tpush_{property.type}(stack, {property.read_symbol}(state{maybe_object}));");
        println("\t\tbreak;");
        println("\t}}");
    }
    if (property.write_id != 0) {
        println("\t// id={property.write_id} name={property.name} symbol={property.write_symbol}");
        println("\tcase {property.write_id}: {{");
        println("\t\tkalos_stack_fixup_no_varargs(1, stack);");
        print("\t\t{property.write_symbol}(state{maybe_object}, ");
        if (property.type == "string") {
            print("peek(stack, -1)->value.string");
        } else if (property.type == "number" || property.type == "bool") {
            print("peek(stack, -1)->value.number");
        } else if (property.type == "object") {
            print("peek(stack, -1)->value.object");
        }
        println(");");
        println("\t\tkalos_stack_cleanup_no_varargs(1, 0, state, stack);");
        println("\t\tbreak;");
        println("\t}}");
    }
}
