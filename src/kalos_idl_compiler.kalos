import function;
import module;

handle open {
    println("/* Generated by kalos_idl_compiler - DO NOT MODIFY */");
}

#handle begin_module(module) {
handle begin_module {
    println("void {module.prefix}{module.name}(kalos_state state, int function, kalos_stack* stack) {{");
    println("\tswitch (function) {{");
}

#handle function(function) {
handle function {
    println("\t// id={function.id} name={function.name} arg_count={function.arg_count} symbol={function.realname}");
    println("\tcase {function.id}: {{");
    println("\t\tLOG(\"Invoke %s\", \"{function.name}\");");
    println("\t\tint arg_count = {function.arg_count};");
    var arg_offset = 1;
    if (function.varargs == "void") {
        println("\t\tkalos_stack_fixup_no_varargs(arg_count, stack);");
    } else {
        println("\t\tint ofs = kalos_stack_fixup_varargs(arg_count, stack);");
    }
    print("\t\t");
    if (function.return_type == "string") {
        print("kalos_string x = ");
    } else if (function.return_type == "number" || function.return_type == "bool") {
        print("kalos_int x = ");
    } else if (function.return_type == "object") {
        print("kalos_object* x = ");
    }
    var arg;
    var index = 0;
    print("{function.realname}(state");
    for arg in function.args {
        print(", ");
        if (arg == "string") {
            print("&peek(stack, {-index-arg_offset})->value.string");
        } else if (arg == "number" || arg == "bool") {
            print("peek(stack, {-index-arg_offset})->value.number");
        } else if (arg == "object") {
            print("peek(stack, {-index-arg_offset})->value.object");
        }
        index += 1;
    }
    if (function.varargs != "void") {
        print(", peek(stack, -arg_count-ofs-1)->value.number, peek(stack, -arg_count-1)");
    }
    println(");");
    if (function.varargs == "void") {
        println("\t\tkalos_stack_cleanup_no_varargs(arg_count, 0, state, stack);");
    } else {
        println("\t\tkalos_stack_cleanup_varargs(arg_count, ofs, state, stack);");
    }
    if (function.return_type != "void") {
        println("\t\tpush_{function.return_type}(stack, x);");
    }
    println("\t\tbreak;");
    println("\t}}");
}

#handle end_module(module) {
handle end_module {
    println("\t}}");
    println("}}");
    println("");
}
