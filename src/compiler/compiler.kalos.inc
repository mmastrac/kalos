"import file;\n"
"import kalos;\n"
"import sys;\n"
"\n"
"var exe;\n"
"var verbose;\n"
"\n"
"fn help() {\n"
"    println(\"\"\"Usage:\n"
"  {exe} [-v] compile idl-file source-file compiled-file\n"
"  {exe} [-v] dispatch idl-source-file c-file\n"
"  {exe} [-v] dump compiled-file\n"
"  {exe} [-v] hexify source-file c-file\n"
"  {exe} [-v] idl idl-source-file idl-file\n"
"  {exe} [-v] run source-file\n"
"  {exe} [-v] stringify source-file c-file\"\"\");\n"
"    sys.exit(1);\n"
"}\n"
"\n"
"fn extract_args(args): object {\n"
"    if len(args) <= 1 {\n"
"        help();\n"
"    }\n"
"    # Extract the last path segment\n"
"    var segment;\n"
"    for segment in split(args[0], \"/\") {\n"
"        exe = segment;\n"
"    }\n"
"    args = tail(args);\n"
"    if len(args) > 0 && args[0] == \"-v\" {\n"
"        verbose = 1;\n"
"        args = tail(args);\n"
"    }\n"
"    return args;\n"
"}\n"
"\n"
"fn open_read(f): object {\n"
"    if f == \"-\" {\n"
"        return file.stdin;\n"
"    }\n"
"    return file.open(f, file.READ);\n"
"}\n"
"\n"
"fn open_write(f): object {\n"
"    if f == \"-\" {\n"
"        return file.stdout;\n"
"    }\n"
"    return file.open(f, file.WRITE | file.CREATE);\n"
"}\n"
"\n"
"fn go_compile(args) {\n"
"    if len(args) != 3 {\n"
"        help();\n"
"    }\n"
"    var idl = file.read(open_read(args[0]));\n"
"    var compiled_idl = kalos.compile_idl(idl);\n"
"    var script = file.read(open_read(args[1]));\n"
"    var compiled_script = kalos.compile_script(compiled_idl, script);\n"
"    file.write(open_write(args[2]), compiled_script.data);\n"
"    # var i;\n"
"    # for i in range(0, len(compiled.data)) {\n"
"    #     var c = compiled.data[i];\n"
"    #     print(\"0x{ord(c):02x},\"); # see note about zero-pad in test_string_formatting\n"
"    # }\n"
"}\n"
"\n"
"fn go_dispatch(args) {\n"
"    if len(args) != 2 {\n"
"        help();\n"
"    }\n"
"\n"
"    # First, compile the IDL provided by the user\n"
"    var idl = file.read(open_read(args[0]));\n"
"    var compiled_idl = kalos.compile_idl(idl);\n"
"    kalos.generate_dispatch(compiled_idl);\n"
"\n"
"    # Compile our IDL dispatch compiler\n"
"#    var self_idl = kalos.compile_idl(kalos.idl);\n"
"#    var dispatch_script = kalos.compile_script(self_idl, kalos.idl_script);\n"
"}\n"
"\n"
"fn go_dump(args) {\n"
"    if len(args) != 1 {\n"
"        help();\n"
"    }\n"
"    var f = open_read(args[0]);\n"
"    var script = file.read(f);\n"
"}\n"
"\n"
"fn go_hexify(args) {\n"
"    if len(args) != 2 {\n"
"        help();\n"
"    }\n"
"    var data = file.read(open_read(args[0]));\n"
"    var out = open_write(args[1]);\n"
"    var i;\n"
"    for i in range(0, len(data)) {\n"
"        if i && i % 16 == 0 {\n"
"            file.write(out, \"\\n\");\n"
"        }\n"
"        var c = data[i];\n"
"        file.write(out, \"0x{ord(c):02x},\"); # see note about zero-pad in test_string_formatting\n"
"    }\n"
"}\n"
"\n"
"fn go_idl(args) {\n"
"    if len(args) != 2 {\n"
"        help();\n"
"    }\n"
"    var idl = file.read(open_read(args[0]));\n"
"    var compiled_idl = kalos.compile_idl(idl);\n"
"    file.write(open_write(args[1]), compiled_idl.data);\n"
"}\n"
"\n"
"fn go_run(args) {\n"
"    if len(args) != 1 {\n"
"        help();\n"
"    }\n"
"    var idl = kalos.idl;\n"
"    var compiled_idl = kalos.compile_idl(idl);\n"
"    var script = file.read(open_read(args[0]));\n"
"    var compiled_script = kalos.compile_script(compiled_idl, script);\n"
"    kalos.run_script(compiled_script, tail(args));\n"
"}\n"
"\n"
"fn go_stringify(args) {\n"
"    if len(args) != 2 {\n"
"        help();\n"
"    }\n"
"    var data = file.read(open_read(args[0]));\n"
"    var out = open_write(args[1]);\n"
"    var i;\n"
"    file.write(out, \"\\\"\");\n"
"    for i in range(0, len(data)) {\n"
"        var c = data[i];\n"
"        if c == \"\\n\" {\n"
"            file.write(out, \"\\\\n\\\"\\n\\\"\");\n"
"        } else if c == \"\\\"\" {\n"
"            file.write(out, \"\\\\\\\"\");\n"
"        } else if c == \"\\\\\" {\n"
"            file.write(out, \"\\\\\\\\\");\n"
"        } else if ord(c) < 32 || ord(c) >= 127 {\n"
"            file.write(out, \"\\\\x{ord(c):02x}\");\n"
"        } else {\n"
"            file.write(out, c);\n"
"        }\n"
"    }\n"
"    file.write(out, \"\\\"\\n\");\n"
"}\n"
"\n"
"on sys.main(args) {\n"
"    args = extract_args(args);\n"
"    if len(args) == 0 {\n"
"        help();\n"
"    }\n"
"    if (args[0] == \"compile\") {\n"
"        go_compile(tail(args));\n"
"    } else if (args[0] == \"dispatch\") {\n"
"        go_dispatch(tail(args));\n"
"    } else if (args[0] == \"dump\") {\n"
"        go_dump(tail(args));\n"
"    } else if (args[0] == \"hexify\") {\n"
"        go_hexify(tail(args));\n"
"    } else if (args[0] == \"idl\") {\n"
"        go_idl(tail(args));\n"
"    } else if (args[0] == \"run\") {\n"
"        go_run(tail(args));\n"
"    } else if (args[0] == \"stringify\") {\n"
"        go_stringify(tail(args));\n"
"    } else {\n"
"        help();\n"
"    }\n"
"}\n"
""
