idl {
    prefix "kalos_module_idl_";
    dispatch name;

    module builtin {
        fn println(s: string) = kalos_idl_compiler_println;
        fn print(s: string) = kalos_idl_compiler_print;
        fn log(s: string) = kalos_idl_compiler_log;
    }

    module sys {
        prop args: object { read = kalos_sys_get_args; }
        fn env(s: string): string = kalos_sys_get_env;
        fn exit(n: number) = c "exit(@0)";
        handler main(args: object);
    }

    module file {
        const READ: number = 1;
        const WRITE: number = 2;
        const READ_WRITE: number = 3;
        const CREATE: number = 4;
        const TRUNCATE: number = 8;
        const APPEND: number = 16;

        fn open(s: string, mode: number): object = kalos_file_open;
        fn readline(file: object): string = kalos_file_readline;
        fn read {
            (file: object): string = kalos_file_read_all;
            (file: object, size: number): string = kalos_file_read;
        }
        fn write(file: object, s: string) = kalos_file_write;
        fn close(file: object) = kalos_file_close;

        prop stdin: object { read = kalos_file_get_stdin; }
        prop stdout: object { read = kalos_file_get_stdout; }
        prop stderr: object { read = kalos_file_get_stderr; }
    }

    module kalos {
        fn compile_script(modules: object, script: string): object = kalos_compiler_compile_script;
        fn compile_idl(script: string): object = kalos_compiler_compile_idl;
        fn run_script(binary: object, args: object): void = kalos_compiler_run_script;
        fn lex_script(script: string): object = kalos_compiler_lex_script;

        prop module: object { read = kalos_get_compiler_module; }

        object idl {
            prop data: string { read = kalos_compiler_get_buffer; }
            prop modules: object { read = kalos_idl_get_modules; }
            prop flags: number { read = kalos_idl_get_flags; }
        }

        object script {
            prop data: string { read = kalos_compiler_get_buffer; }
        }

        object lexer {
            prop peek: object { read = kalos_lexer_peek_token; }
            prop read: object { read = kalos_lexer_read_token; }
        }

        object token {
            prop string: string { read = kalos_lexer_token_read_string; }
            prop token: string { read = kalos_lexer_token_read_token; }
            prop is_word: bool { read = kalos_lexer_token_read_is_word; }
        }
    }

    module kidl {
        fn walk_modules(context: any) = kalos_idl_walk_modules;
        prop module: object { write = kalos_idl_set_module; }
        prop prefix: string { read = kalos_idl_module_prefix; }

        fn create_list_object(type: string, list: object): object = kalos_idl_create_list_object;
        handler resolve_list_object_prop(type: string, property: any, list: object): any;
    }

    module module {
        fn walk_exports(context: any) = kalos_idl_walk_exports;
        fn walk_object_properties(context: any, object: object) = kalos_idl_walk_object_properties;

        handler begin(context: any, module: object);
        handler function(context: any, function: object);
        handler handler(context: any, handler: object);
        handler property(context: any, property: object);
        handler object(context: any, property: object);

        # TODO: We should move this out of KIDL
        object idl_obj {
            prop class: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
            prop prefix: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
            prop dispatch: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
            prop modules: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
        }

        object module_obj {
            prop name: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
            prop items: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
            prop invoke_id: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
        }

        object const_obj {
            prop name: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
            prop type: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
            prop value: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
        }

        object function_obj {
            prop name: string { read = kalos_idl_export_name; }
            prop overloads: object { read = kalos_idl_function_overloads; }
        }

        object overload_obj {
            prop return_type: string { read = kalos_idl_overload_return_type; }
            prop args: object { read = kalos_idl_overload_args; }
            prop arg_count: number { read = kalos_idl_overload_arg_count; }
            prop varargs: string { read = kalos_idl_overload_varargs; }
            prop binding: object { read = kalos_idl_overload_binding; }
        }

        object arg_obj {
            prop name: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
            prop type: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
            prop is_vararg: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
        }

        object property_obj {
            prop name: string { read = kalos_idl_property_name; }
            prop type: string { read = kalos_idl_property_type; }
            prop read_binding: object { read = kalos_idl_property_read_binding; }
            prop write_binding: object { read = kalos_idl_property_write_binding; }
        }

        object handler_obj {
            prop name: string { read = kalos_idl_export_name; }
            prop module_index: number { read = kalos_idl_handler_module_index; }
            prop handler_index: number { read = kalos_idl_handler_index; }
            prop args: object { read = kalos_idl_handler_args; }
            prop return_type: string { read = kalos_idl_handler_return_type; }
            prop invoke_id: string { read = c "IDL_STRING(IDL_OBJECT(kalos_module)->name_index)"; }
        }

        object object_obj {
            prop name: string { read = kalos_idl_export_name; }
            prop items: string { read = c "kalos_string_allocate(kalos_state_from_run_state(state), \"\")"; }
        }

        object binding_obj {
            prop type: string { read = kalos_idl_binding_type; }
            prop value: string { read = kalos_idl_binding_value; }
            prop invoke_id: number { read = c "IDL_OBJECT(kalos_binding)->invoke_id"; }
        }
    }
}
