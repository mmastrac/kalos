var lexer;

on kidl.resolve_list_object_prop(type, property, list): any {
    if property == @@(.name) {
        return type + "=" + list[0];
    } else if property == @@(.return_type) {
        return type + "=" + list[1];
    } else if property == @@(.b) {
        return type + "=" + list[2];
    }
    return "unknown";
}

fn idl_error(s) {
    print("ERROR: {s}\n");
    sys.exit(1);
}

fn idl_log(s) {
    print("LOG: {s}\n");
}

fn expect_word(): string {
    var next = lexer.read;
    if next.token == "WORD" {
        idl_log("    token = {next.token} string = {next.string}");
        return next.string;
    }
    if next.is_word {
        # return lower(next.string);
        return "<fixme>";
    }
    idl_error("Expected WORD, but got token {next.token}");
    return "<error>";
}

fn expect_token(token): object {
    var next = lexer.read;
    if next.token != token {
        idl_error("Expected {token} but got {next.token}");
    }
    return next;
}

fn parse_idl_type(): object {
    if lexer.peek.token == "COLON" {
        expect_token("COLON");
        var type = lexer.read.token;
        idl_log("  type: {type}");
    }
    return [];
}

fn parse_idl_args() {
    expect_token("PAREN_OPEN");
    if lexer.peek.token != "PAREN_CLOSE" {
        loop {
            var param_name = expect_word();
            var param_type = parse_idl_type();
            if lexer.peek.token == "PAREN_CLOSE" {
                break;
            }
            expect_token("COMMA");
        }
    }
    expect_token("PAREN_CLOSE");
}

fn parse_idl_binding(): object {
    expect_token("EQ");
    var retval;
    if lexer.peek.token == "C" {
        expect_token("C");
        var token = expect_token("STRING_LITERAL");
        retval = [token.string];
    } else {
        var word = expect_word();
        retval = [word];
    }
    expect_token("SEMI");
    idl_log("  binding: {retval}");
    return retval;
}

fn parse_idl_prop() {
    var prop_name = expect_word();
    var type = parse_idl_type();
    expect_token("BRA_OPEN");
    var token = lexer.read;
    if token.token == "READ" {
        parse_idl_binding();
        token = lexer.read;
    }
    if token.token == "WRITE" {
        parse_idl_binding();
        token = lexer.read;
    }
    if token.token != "BRA_CLOSE" {
        idl_error("Expected BRA_CLOSE but got {token.token}");
    }
}

fn parse_idl_fn(): object {
    var fn_name = expect_word();
    if lexer.peek.token == "BRA_OPEN" {
        expect_token("BRA_OPEN");
        loop {
            if lexer.peek.token == "BRA_CLOSE" {
                break;
            }
            parse_idl_args();
            var return_type = parse_idl_type();
            var binding = parse_idl_binding();
        }
        expect_token("BRA_CLOSE");
    } else {
        parse_idl_args();
        var return_type = parse_idl_type();
        var binding = parse_idl_binding();
    }
    var fn_list = [fn_name, return_type, binding];
    idl_log("fn: {fn_list}");
    return fn_list;
}

fn parse_idl_handler(): object {
    var name = expect_word();
    expect_token("PAREN_OPEN");
    if lexer.peek.token != "PAREN_CLOSE" {
        loop {
            var param_name = expect_word();
            var param_type = parse_idl_type();
            if lexer.peek.token == "PAREN_CLOSE" {
                break;
            }
            expect_token("COMMA");
        }
    }
    expect_token("PAREN_CLOSE");
    var return_type = parse_idl_type();
    expect_token("SEMI");
    var handler_list = [name, return_type];
    idl_log("handler: {handler_list}");
    return handler_list;
}

fn parse_idl_const(): object {
    var name = expect_word();
    var const_type = parse_idl_type();
    expect_token("EQ");
    var value = lexer.read.string;
    expect_token("SEMI");
    var const_list = [name, const_type, value];
    idl_log("const: {const_list}");
    return const_list;
}

fn parse_idl_object(): object {
    var name = expect_word();
    expect_token("BRA_OPEN");
    loop {
        if lexer.peek.token == "BRA_CLOSE" {
            break;
        }
        var token = lexer.read;
        if token.token == "PROP" {
            parse_idl_prop();
        } else {
            idl_error("Unexpected token in idl object block: {token.token}");
        }
    }
    expect_token("BRA_CLOSE");
    return [];
}

fn parse_idl_module() {
    var name = expect_word();
    expect_token("BRA_OPEN");
    loop {
        var token = lexer.read;
        if token.token == "BRA_CLOSE" {
            break;
        } else if token.token == "FN" {
            parse_idl_fn();
        } else if token.token == "PROP" {
            parse_idl_prop();
        } else if token.token == "HANDLER" {
            parse_idl_handler();
        } else if token.token == "CONST" {
            parse_idl_const();
        } else if token.token == "OBJECT" {
            parse_idl_object();
        } else {
            idl_error("Unexpected token in idl module block: {token.token}");
        }
    }
}

fn parse_idl_block() {
    var prefix = "";
    var dispatch = "";
    var modules = [];

    loop {
        if lexer.peek.token == "BRA_CLOSE" {
            break;
        }
        var token = lexer.read;
        if token.token == "PREFIX" {
            token = expect_token("STRING_LITERAL");
            prefix = token.string;
            expect_token("SEMI");
        } else if token.token == "DISPATCH" {
            token = expect_token("NAME");
            dispatch = "name";
            expect_token("SEMI");
        } else if token.token == "MODULE" {
            parse_idl_module();
        } else {
            idl_error("Unexpected token in idl block: {token.token}");
        }
    }
}

export fn parse_idl(lexer_) {
    lexer = lexer_;
    expect_token("IDL");
    expect_token("BRA_OPEN");
    parse_idl_block();
    expect_token("BRA_CLOSE");
    lexer = 0;
}
