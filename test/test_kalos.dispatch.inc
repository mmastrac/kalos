/* Generated by kalos_idl_compiler - DO NOT MODIFY */

#define K__pstring kalos_string*
#define K__string  kalos_string
#define K__pnumber kalos_int
#define K__number  kalos_int
#define K__pbool   kalos_int
#define K__bool    kalos_int
#define K__pobject kalos_object_ref*
#define K__object  kalos_object_ref
#define K__pany    kalos_value*
#define K__any     kalos_value

#define K__t_string KALOS_VALUE_STRING
#define K__t_number KALOS_VALUE_NUMBER
#define K__t_bool   KALOS_VALUE_BOOL
#define K__t_object KALOS_VALUE_OBJECT
#define K__t_any    KALOS_VALUE_ANY

#define K__clean_string(stack, x) kalos_string_release(state, x);
#define K__clean_number(stack, x) ;
#define K__clean_bool  (stack, x) ;
#define K__clean_object(stack, x) kalos_object_release(state, &x);
#define K__clean_any   (stack, x) kalos_clear(state, x);
#define K__arg(n, x)     peek(stack, (n)-(x))
#define K__arg_string(x) &((x)->value.string)
#define K__arg_number(x) (x)->value.number
#define K__arg_bool(x)   (x)->value.number
#define K__arg_object(x) &((x)->value.object)
#define K__arg_any(x)    (x)

// id=0000:0001 name=init
void kalos_module_dispatch_test_trigger_init(kalos_state state) {
	kalos_trigger(state, kalos_make_address(0x0, 0x1));
}

void kalos_module_dispatch_test_builtin(kalos_state state, int function, int param_count, kalos_stack* stack, bool retval) {
	switch (function) {
	// id=1 name=print arg_count=0 symbol=test_print
	case 1: {
		LOG("Invoke %s", "print");
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 1 + vararg_count;
		kalos_stack_setup_0(stack);
		test_print(state, vararg_count, kalos_stack_vararg_start(stack, vararg_count));
		kalos_stack_cleanup(arg_count, state, stack);
		break;
	}

	}
}

// id=0001:0001 name=with_args
void kalos_module_dispatch_test_test_trigger_with_args(kalos_state state, K__pstring a0) {
	kalos_load_arg_string(state, 0, a0);
	kalos_trigger(state, kalos_make_address(0x1, 0x1));
}

// id=0001:0002 name=self_trigger
void kalos_module_dispatch_test_test_trigger_self_trigger(kalos_state state, K__pstring a0, K__pobject a1) {
	kalos_load_arg_string(state, 0, a0);
	kalos_load_arg_object(state, 1, a1);
	kalos_trigger(state, kalos_make_address(0x1, 0x2));
}

//kalos_module_dispatch_test_test_object_a_props
bool kalos_module_dispatch_test_test_object_a_props(kalos_state state, kalos_object_ref* object, int function, int param_count, kalos_stack* stack) {
	switch (function) {
	// id=2 name=a symbol=test_read_a
	case 2: {
		push_string(stack, test_read_a(state, object));
		break;
	}
	// id=6 name=c symbol=test_read_c
	case 6: {
		push_number(stack, test_read_c(state, object));
		break;
	}
	// id=7 name=c symbol=test_write_c
	case 7: {
		test_write_c(state, object, K__arg_number(K__arg(1, 1)));
		kalos_stack_cleanup(1, state, stack);
		break;
	}
	default: return false;
	}
	return true;
}

//kalos_module_dispatch_test_test_object_b_props
bool kalos_module_dispatch_test_test_object_b_props(kalos_state state, kalos_object_ref* object, int function, int param_count, kalos_stack* stack) {
	switch (function) {
	// id=2 name=a symbol=test_read_a
	case 2: {
		push_string(stack, test_read_a(state, object));
		break;
	}
	// id=4 name=b symbol=test_read_b
	case 4: {
		push_string(stack, test_read_b(state, object));
		break;
	}
	// id=6 name=c symbol=test_read_c2
	case 6: {
		push_number(stack, test_read_c2(state, object));
		break;
	}
	default: return false;
	}
	return true;
}

void kalos_module_dispatch_test_test(kalos_state state, int function, int param_count, kalos_stack* stack, bool retval) {
	switch (function) {
	// id=1 name=read_write symbol=test_read_write_read
	case 1: {
		push_number(stack, test_read_write_read(state));
		break;
	}
	// id=2 name=read_write symbol=test_read_write_write
	case 2: {
		test_read_write_write(state, K__arg_number(K__arg(1, 1)));
		kalos_stack_cleanup(1, state, stack);
		break;
	}
	// id=3 name=read_only symbol=test_read_only_read
	case 3: {
		push_number(stack, test_read_only_read(state));
		break;
	}
	// id=4 name=write_only symbol=test_write_only_write
	case 4: {
		test_write_only_write(state, K__arg_number(K__arg(1, 1)));
		kalos_stack_cleanup(1, state, stack);
		break;
	}
	// id=5 name=add_one arg_count=1 symbol=
	case 5: {
		LOG("Invoke %s", "add_one");
		const int arg_count = 1;
		kalos_stack_setup_1(stack, K__t_number);
		K__number x = (K__arg_number(K__arg(arg_count, 1))) + 1;
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=6 name=sum_numbers arg_count=0 symbol=test_kalos_sum_numbers
	case 6: {
		LOG("Invoke %s", "sum_numbers");
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 1 + vararg_count;
		kalos_stack_setup_0(stack);
		K__number x = test_kalos_sum_numbers(state, vararg_count, kalos_stack_vararg_start(stack, vararg_count));
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=7 name=sum_numbers_2 arg_count=2 symbol=test_kalos_sum_numbers_2
	case 7: {
		LOG("Invoke %s", "sum_numbers_2");
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 3 + vararg_count;
		kalos_stack_setup_2(stack, K__t_number, K__t_number);
		K__number x = test_kalos_sum_numbers_2(state, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)), vararg_count, kalos_stack_vararg_start(stack, vararg_count));
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=8 name=concat arg_count=8 symbol=test_kalos_concat
	case 8: {
		LOG("Invoke %s", "concat");
		const int arg_count = 8;
		kalos_stack_setup_8(stack, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string);
		K__string x = test_kalos_concat(state, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)), K__arg_string(K__arg(arg_count, 3)), K__arg_string(K__arg(arg_count, 4)), K__arg_string(K__arg(arg_count, 5)), K__arg_string(K__arg(arg_count, 6)), K__arg_string(K__arg(arg_count, 7)), K__arg_string(K__arg(arg_count, 8)));
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_string(stack, x);
		} else {
			K__clean_string(stack, x);
		}
		break;
	}

	// id=9 name=overloaded_add arg_count=2 symbol=
	case 9: {
		LOG("Invoke %s", "overloaded_add");
		const int arg_count = 2;
		kalos_stack_setup_2(stack, K__t_number, K__t_number);
		K__number x = 111;
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=10 name=overloaded_add arg_count=2 symbol=
	case 10: {
		LOG("Invoke %s", "overloaded_add");
		const int arg_count = 2;
		kalos_stack_setup_2(stack, K__t_string, K__t_string);
		K__number x = 222;
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=11 name=trigger_self arg_count=2 symbol=kalos_module_dispatch_test_test_trigger_self_trigger
	case 11: {
		LOG("Invoke %s", "trigger_self");
		const int arg_count = 2;
		kalos_stack_setup_2(stack, K__t_string, K__t_object);
		kalos_module_dispatch_test_test_trigger_self_trigger(state, K__arg_string(K__arg(arg_count, 1)), K__arg_object(K__arg(arg_count, 2)));
		kalos_stack_cleanup(arg_count, state, stack);
		break;
	}

	// id=12 name=raw_c arg_count=2 symbol=
	case 12: {
		LOG("Invoke %s", "raw_c");
		const int arg_count = 2;
		kalos_stack_setup_2(stack, K__t_number, K__t_number);
		K__number x = (K__arg_number(K__arg(arg_count, 1)))*10+(K__arg_number(K__arg(arg_count, 2)));
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_number(stack, x);
		} else {
			K__clean_number(stack, x);
		}
		break;
	}

	// id=13 name=make_a arg_count=0 symbol=test_make_a
	case 13: {
		LOG("Invoke %s", "make_a");
		const int arg_count = 0;
		kalos_stack_setup_0(stack);
		K__object x = test_make_a(state);
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_object(stack, x);
		} else {
			K__clean_object(stack, x);
		}
		break;
	}

	// id=14 name=make_b arg_count=0 symbol=test_make_b
	case 14: {
		LOG("Invoke %s", "make_b");
		const int arg_count = 0;
		kalos_stack_setup_0(stack);
		K__object x = test_make_b(state);
		kalos_stack_cleanup(arg_count, state, stack);
		if (retval) {
			push_object(stack, x);
		} else {
			K__clean_object(stack, x);
		}
		break;
	}

	}
}

kalos_dispatch_fn kalos_module_dispatch_test_dispatch[] = {
	kalos_module_dispatch_test_builtin,
	kalos_module_dispatch_test_test,
};

#undef K__string
#undef K__number
#undef K__bool
#undef K__object
#undef K__any
