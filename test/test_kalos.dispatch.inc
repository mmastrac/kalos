/* Generated by kalos_idl_compiler - DO NOT MODIFY */

#define K__pstring      kalos_string*
#define K__string       kalos_string
#define K__pnumber      kalos_int
#define K__number       kalos_int
#define K__pbool        kalos_int
#define K__bool         kalos_int
#define K__pobject      kalos_object_ref*
#define K__object       kalos_object_ref
#define K__pany         kalos_value*
#define K__any          kalos_value

#define K__t_string     KALOS_VALUE_STRING
#define K__t_number     KALOS_VALUE_NUMBER
#define K__t_bool       KALOS_VALUE_BOOL
#define K__t_object     KALOS_VALUE_OBJECT
#define K__t_any        KALOS_VALUE_ANY

#define K__final_string(stack, x) if (retval) { push_string(stack, x); } else { kalos_string_release((kalos_state*)state, x);; }
#define K__final_number(stack, x) if (retval) { push_number(stack, x); } else { ;; }
#define K__final_bool(stack, x)   if (retval) { push_bool(stack, x); } else { ;; }
#define K__final_object(stack, x) if (retval) { push_object(stack, x); } else { kalos_object_release((kalos_state*)state, &x);; }
#define K__final_any(stack, x)    if (retval) { push_any(stack, x); } else { kalos_clear((kalos_state*)state, &x);; }
#define K__arg(n, x)              peek(stack, (n)-(x))
#define K__arg_string(x)          &((x)->value.string)
#define K__arg_number(x)          (x)->value.number
#define K__arg_bool(x)            (x)->value.number
#define K__arg_object(x)          &((x)->value.object)
#define K__arg_any(x)             (x)
#define K__match(id, n, s)        (param_count == n && function == id)

// id=0000:0001 name=init
void kalos_module_dispatch_test_trigger_init(kalos_run_state* state) {
	kalos_trigger(state, kalos_make_address(0x0, 0x1));
}

bool kalos_module_dispatch_test_builtin(kalos_run_state* state, int function, int param_count, kalos_stack* stack, bool retval) {
	// id=1 name=print arg_count=0 binding=fn test_print
	if (K__match(/*id=*/1, /*args=*/0, /*name=*/print)) {
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 1 + vararg_count;
		if (kalos_stack_setup_0(state, arg_count)) {
			test_print((void*)state, vararg_count, kalos_stack_vararg_start(stack, vararg_count));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	return false;
}

// id=0001:0001 name=with_args
void kalos_module_dispatch_test_test_trigger_with_args(kalos_run_state* state, K__pstring a0) {
	kalos_load_arg_string(state, 0, a0);
	kalos_trigger(state, kalos_make_address(0x1, 0x1));
}

// id=0001:0002 name=self_trigger
void kalos_module_dispatch_test_test_trigger_self_trigger(kalos_run_state* state, K__pstring a0, K__pobject a1) {
	kalos_load_arg_string(state, 0, a0);
	kalos_load_arg_object(state, 1, a1);
	kalos_trigger(state, kalos_make_address(0x1, 0x2));
}

//kalos_module_dispatch_test_test_object_a_props
bool kalos_module_dispatch_test_test_object_a_props_fn(kalos_run_state* state, kalos_object_ref* object, int function, int param_count, kalos_stack* stack) {
	bool retval = true;
	// id=2 name=a binding=fn test_read_a
	if (K__match(/*id=*/2, /*args=*/0, /*name=*/a)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__string x = test_read_a((void*)state, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=4 name=c binding=fn test_read_c
	if (K__match(/*id=*/4, /*args=*/0, /*name=*/c)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__number x = test_read_c((void*)state, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=5 name=c binding=fn test_write_c
	if (K__match(/*id=*/5, /*args=*/1, /*name=*/c)) {
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_object, K__t_number)) {
			test_write_c((void*)state, K__arg_object(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	return false;
}

kalos_object_dispatch kalos_module_dispatch_test_test_object_a_props = {
	.dispatch_id = kalos_module_dispatch_test_test_object_a_props_fn
};

//kalos_module_dispatch_test_test_object_b_props
bool kalos_module_dispatch_test_test_object_b_props_fn(kalos_run_state* state, kalos_object_ref* object, int function, int param_count, kalos_stack* stack) {
	bool retval = true;
	// id=2 name=a binding=fn test_read_a
	if (K__match(/*id=*/2, /*args=*/0, /*name=*/a)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__string x = test_read_a((void*)state, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=6 name=b binding=fn test_read_b
	if (K__match(/*id=*/6, /*args=*/0, /*name=*/b)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__string x = test_read_b((void*)state, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=4 name=c binding=fn test_read_c2
	if (K__match(/*id=*/4, /*args=*/0, /*name=*/c)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_object)) {
			K__number x = test_read_c2((void*)state, K__arg_object(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	return false;
}

kalos_object_dispatch kalos_module_dispatch_test_test_object_b_props = {
	.dispatch_id = kalos_module_dispatch_test_test_object_b_props_fn
};

bool kalos_module_dispatch_test_test(kalos_run_state* state, int function, int param_count, kalos_stack* stack, bool retval) {
	// id=1 name=read_write binding=fn test_read_write_read
	if (K__match(/*id=*/1, /*args=*/0, /*name=*/read_write)) {
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__number x = test_read_write_read((void*)state);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=2 name=read_write binding=fn test_read_write_write
	if (K__match(/*id=*/2, /*args=*/1, /*name=*/read_write)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			test_read_write_write((void*)state, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=3 name=read_only binding=fn test_read_only_read
	if (K__match(/*id=*/3, /*args=*/0, /*name=*/read_only)) {
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__number x = test_read_only_read((void*)state);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=4 name=write_only binding=fn test_write_only_write
	if (K__match(/*id=*/4, /*args=*/1, /*name=*/write_only)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			test_write_only_write((void*)state, K__arg_number(K__arg(arg_count, 1)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=5 name=add_one arg_count=1 binding=c @0 + 1
	if (K__match(/*id=*/5, /*args=*/1, /*name=*/add_one)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_number)) {
			K__number x = ((K__arg_number(K__arg(arg_count, 1))) + 1);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=6 name=sum_numbers arg_count=0 binding=fn test_kalos_sum_numbers
	if (K__match(/*id=*/6, /*args=*/0, /*name=*/sum_numbers)) {
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 1 + vararg_count;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__number x = test_kalos_sum_numbers((void*)state, vararg_count, kalos_stack_vararg_start(stack, vararg_count));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=7 name=sum_numbers_2 arg_count=2 binding=fn test_kalos_sum_numbers_2
	if (K__match(/*id=*/7, /*args=*/2, /*name=*/sum_numbers_2)) {
		const int vararg_count = kalos_stack_vararg_count(stack);
		const int arg_count = 3 + vararg_count;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = test_kalos_sum_numbers_2((void*)state, K__arg_number(K__arg(arg_count, 1)), K__arg_number(K__arg(arg_count, 2)), vararg_count, kalos_stack_vararg_start(stack, vararg_count));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=8 name=concat arg_count=8 binding=fn test_kalos_concat
	if (K__match(/*id=*/8, /*args=*/8, /*name=*/concat)) {
		const int arg_count = 8;
		if (kalos_stack_setup_8(state, arg_count, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string, K__t_string)) {
			K__string x = test_kalos_concat((void*)state, K__arg_string(K__arg(arg_count, 1)), K__arg_string(K__arg(arg_count, 2)), K__arg_string(K__arg(arg_count, 3)), K__arg_string(K__arg(arg_count, 4)), K__arg_string(K__arg(arg_count, 5)), K__arg_string(K__arg(arg_count, 6)), K__arg_string(K__arg(arg_count, 7)), K__arg_string(K__arg(arg_count, 8)));
			kalos_stack_cleanup(state, arg_count);
			K__final_string(stack, x);
			return true;
		}
	}

	// id=9 name=overloaded arg_count=1 binding=c 100
	if (K__match(/*id=*/9, /*args=*/1, /*name=*/overloaded)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_string)) {
			K__number x = (100);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=9 name=overloaded arg_count=1 binding=c 1
	if (K__match(/*id=*/9, /*args=*/1, /*name=*/overloaded)) {
		const int arg_count = 1;
		if (kalos_stack_setup_1(state, arg_count, K__t_any)) {
			K__number x = (1);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=9 name=overloaded arg_count=2 binding=c 2
	if (K__match(/*id=*/9, /*args=*/2, /*name=*/overloaded)) {
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_any, K__t_any)) {
			K__number x = (2);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=9 name=overloaded arg_count=3 binding=c 3
	if (K__match(/*id=*/9, /*args=*/3, /*name=*/overloaded)) {
		const int arg_count = 3;
		if (kalos_stack_setup_3(state, arg_count, K__t_any, K__t_any, K__t_any)) {
			K__number x = (3);
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=10 name=trigger_self arg_count=2 binding=fn kalos_module_dispatch_test_test_trigger_self_trigger
	if (K__match(/*id=*/10, /*args=*/2, /*name=*/trigger_self)) {
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_string, K__t_object)) {
			kalos_module_dispatch_test_test_trigger_self_trigger((void*)state, K__arg_string(K__arg(arg_count, 1)), K__arg_object(K__arg(arg_count, 2)));
			kalos_stack_cleanup(state, arg_count);
			return true;
		}
	}

	// id=11 name=raw_c arg_count=2 binding=c @0*10+@1
	if (K__match(/*id=*/11, /*args=*/2, /*name=*/raw_c)) {
		const int arg_count = 2;
		if (kalos_stack_setup_2(state, arg_count, K__t_number, K__t_number)) {
			K__number x = ((K__arg_number(K__arg(arg_count, 1)))*10+(K__arg_number(K__arg(arg_count, 2))));
			kalos_stack_cleanup(state, arg_count);
			K__final_number(stack, x);
			return true;
		}
	}

	// id=12 name=make_a arg_count=0 binding=fn test_make_a
	if (K__match(/*id=*/12, /*args=*/0, /*name=*/make_a)) {
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__object x = test_make_a((void*)state);
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	// id=13 name=make_b arg_count=0 binding=fn test_make_b
	if (K__match(/*id=*/13, /*args=*/0, /*name=*/make_b)) {
		const int arg_count = 0;
		if (kalos_stack_setup_0(state, arg_count)) {
			K__object x = test_make_b((void*)state);
			kalos_stack_cleanup(state, arg_count);
			K__final_object(stack, x);
			return true;
		}
	}

	return false;
}

kalos_dispatch_fn kalos_module_dispatch_test_dispatch[] = {
	kalos_module_dispatch_test_builtin,
	kalos_module_dispatch_test_test,
};

#undef K__pstring
#undef K__string
#undef K__pnumber
#undef K__number
#undef K__pbool
#undef K__bool
#undef K__pobject
#undef K__object
#undef K__pany
#undef K__any
#undef K__t_string
#undef K__t_number
#undef K__t_bool
#undef K__t_object
#undef K__t_any
#undef K__final_string
#undef K__final_number
#undef K__final_bool
#undef K__final_object
#undef K__final_any
#undef K__arg
#undef K__arg_string
#undef K__arg_number
#undef K__arg_bool
#undef K__arg_object
#undef K__arg_any
#undef K__match
