idl {
    prefix "kalos_module_dispatch_test_";

    module builtin {
        fn print(args: any...) = test_print;
        handler init;
    }

    module test {
        const ONE: number = 1;
        const PI_ISH: number = 31415;
        const HELLO_WORLD: string = "hello world";
        const ESCAPE: string = "\x60";
        prop read_write: number { read = test_read_write_read; write = test_read_write_write; }
        prop read_only: number { read = test_read_only_read; }
        prop write_only: number { write = test_write_only_write; }
        fn add_one(to: number): number = c "@0 + 1";
        fn sum_numbers(n: number...): number = test_kalos_sum_numbers;
        fn sum_numbers_2(a: number, b: number, n: number...): number = test_kalos_sum_numbers_2;
        fn concat(s1: string, s2: string, s3: string, s4: string,
            s5: string, s6: string, s7: string, s8: string): string = test_kalos_concat;
        fn overloaded {
            (n: string): number = c "100";
            (n: any): number = c "1";
            (n: any, n2: any): number = c "2";
            (n: any, n2: any, n3: any): number = c "3";
        }

        handler with_args(s: string);
        handler self_trigger(s: string, o: object);
        fn trigger_self(s: string, o: object) = kalos_module_dispatch_test_test_trigger_self_trigger;
        fn raw_c(a: number, b: number): number = c "@0*10+@1";
        fn make_a(): object = test_make_a;
        fn make_b(): object = test_make_b;
        object a {
            prop a: string { read = test_read_a; }
            prop c: number { read = test_read_c; write = test_write_c; }
        }
        object b {
            prop a: string { read = test_read_a; }
            prop b: string { read = test_read_b; }
            prop c: number { read = test_read_c2; }
        }
    }

    module file {
        const READ: number = 1;
        const WRITE: number = 2;
        const READ_WRITE: number = 3;
        const CREATE: number = 4;
        const TRUNCATE: number = 8;
        const APPEND: number = 16;

        fn open(s: string, mode: number): object = kalos_file_open;
        fn readline(file: object): string = kalos_file_readline;
        fn read {
            (file: object): string = kalos_file_read_all;
            (file: object, size: number): string = kalos_file_read;
        }
        fn close(file: object) = kalos_file_close;
    }
}
